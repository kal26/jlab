{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy.stats\n",
    "from scipy.optimize import curve_fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set up a linear fit\n",
    "def linear(x, *p):\n",
    "    a, b = p\n",
    "    return a*x + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x_strain</th>\n",
       "      <th>y_strain</th>\n",
       "      <th>x_volts</th>\n",
       "      <th>y_volts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000879</td>\n",
       "      <td>-0.002735</td>\n",
       "      <td>4.23744</td>\n",
       "      <td>5.08805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000550</td>\n",
       "      <td>-0.002735</td>\n",
       "      <td>4.23613</td>\n",
       "      <td>5.08772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000879</td>\n",
       "      <td>-0.002407</td>\n",
       "      <td>4.23514</td>\n",
       "      <td>5.08706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000879</td>\n",
       "      <td>-0.002407</td>\n",
       "      <td>4.23448</td>\n",
       "      <td>5.08706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000879</td>\n",
       "      <td>-0.003064</td>\n",
       "      <td>4.23317</td>\n",
       "      <td>5.08641</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x_strain  y_strain  x_volts  y_volts\n",
       "0  0.000879 -0.002735  4.23744  5.08805\n",
       "1  0.000550 -0.002735  4.23613  5.08772\n",
       "2  0.000879 -0.002407  4.23514  5.08706\n",
       "3  0.000879 -0.002407  4.23448  5.08706\n",
       "4  0.000879 -0.003064  4.23317  5.08641"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the data for calibration\n",
    "# data tables have the following format:\n",
    "# first column [0] is stage x strain gauge voltage\n",
    "# second column [1] is stage y strain gauge voltage\n",
    "# third column [2] is QPD x voltage\n",
    "# fourth column [3] is QPD y voltage\n",
    "\n",
    "# calibration\n",
    "\n",
    "\n",
    "file_name = '/home/kal/jLab/optical_trapping/calibration_data/calib_20181031_1um1000Knacl_100.1x.txt'\n",
    "calib = pd.read_table(file_name, delimiter='\\t', header=None)\n",
    "calib.columns = 'x_strain y_strain x_volts y_volts'.split()\n",
    "calib.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# bin to get errors\n",
    "voltages= list()\n",
    "slopes=list()\n",
    "intercepts=list()\n",
    "\n",
    "# get specific dataset\n",
    "voltage = v\n",
    "strain_data = calib['x_strain']\n",
    "qpd_data = calib['x_volts']\n",
    "\n",
    "# set up the bin sizes\n",
    "bins = np.linspace(min(qpd_data), max(qpd_data), 1000)\n",
    "bin_means = bins + (min(qpd_data)-max(qpd_data))/2000\n",
    "\n",
    "# bin the data\n",
    "digitized = numpy.digitize(strain_data, bins)\n",
    "strain_means = [strain_data[digitized == i].mean() for i in range(1, len(bins))]\n",
    "strain_errors = [scipy.stats.sem(strain_data[digitized == i]) for i in range(1, len(bins))]\n",
    "\n",
    "# plot the origonal and binned\n",
    "plt.scatter(qpd_means, strain_means)\n",
    "plt.plot(bin_means, strain_means)\n",
    "\n",
    "# curve fit\n",
    "# p0 is the initial guess for the fitting coefficients\n",
    "p0 = [-10, 10]\n",
    "popt, pcov = curve_fit(linear, bin_means, strain_means, p0=p0, sigma=strain_errors)\n",
    "# plot the curve fit\n",
    "plt.plot(bin_means, linear(bin_means, popt))\n",
    "plt.show()\n",
    "\n",
    "# add to the lists of params\n",
    "voltages.append(voltage)\n",
    "slopes.append(popt[0])\n",
    "intercepts.append(popt[1])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
